import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:nchatiw_1/Screens/mainScreen.dart';
import 'package:nchatiw_1/Services/authServ.dart';
import 'package:nchatiw_1/Services/chatServ.dart';

class ChatPage extends StatefulWidget {
  final String recieverEmail;
  final String recieverID;
   ChatPage({super.key, required this.recieverEmail, required this.recieverID});

  @override
  State<ChatPage> createState() => _ChatPageState();
}

class _ChatPageState extends State<ChatPage> {
  final ChatServ chatServ = ChatServ();

  final AuthServ authServ = AuthServ();

  final _auth=FirebaseAuth.instance;

  final TextEditingController messageController = TextEditingController();

  void sendMessage() async{
    if (messageController.text.isNotEmpty) {
      await chatServ.sendMessage(widget.recieverID, messageController.text);
      messageController.clear();
    }
  }

  @override
  
  User? getCurrentUser (){
    return _auth.currentUser;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color.fromARGB(255, 2, 204, 167),
      body: SafeArea(child: 
      ListView(
        children: [
          Column(
            mainAxisAlignment: MainAxisAlignment.start,
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Row(
                children: [
                  IconButton(onPressed: (){
                    Navigator.pushNamed(context, MainScreen.screenroute);
                  }, icon: Icon(Icons.back_hand)),
                  Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Text(widget.recieverEmail,style: TextStyle(fontSize:35,color: Colors.white ),),
                  )
                  
                ],
              ),
              Container(
                padding: EdgeInsets.only(left: 0.5,right: 0.5,bottom: 0,top: 0),
                width: MediaQuery.of(context).size.width,
                height: MediaQuery.of(context).size.height/1.2,
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.only(
                    topLeft:Radius.circular(30) ,
                    topRight:Radius.circular(30) ,
                  )
                ),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.end,
                  crossAxisAlignment: CrossAxisAlignment.end,
                  children: [
                    _buildMessageList(),
                  ],
                ),
              ),
              Container(
                decoration:BoxDecoration(
                  color: Colors.white,
                  border: Border(
                    top: BorderSide(
                      color:Color.fromARGB(255, 2, 204, 167),
                      width: 2,
                    )
                  )
                ) ,
                child:Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children:[
                    Expanded(child: TextField(
                  controller: messageController,
                  decoration: InputDecoration(
                    contentPadding: EdgeInsets.symmetric(
                          vertical: 5, horizontal: 20, ),
                    hintText: 'Write your message here..',
                    border: InputBorder.none,
                  ),
                ),
                ),
                TextButton(
                  onPressed: sendMessage,
                 child: Text('send',style: TextStyle(
                  color: Color.fromARGB(255, 11, 220, 235),
                  fontWeight: FontWeight.bold,
                  fontSize: 18,
    
                 ),),
                 )
                  ]
                ) ,
              )
            ],
          )
        ],
      )
      ),
      /*appBar: AppBar(title: Text('Chatting with ${widget.recieverEmail}')),
      body: Column(
        children: [
          Expanded(
            child: _buildMessageList(),
          ),
          buildUserInput(),
        ],
      ),*/
    );
  }
  

  Widget _buildMessageList(){
    String senderId = this.getCurrentUser()!.uid;
    return StreamBuilder(stream: chatServ.getMessages(widget.recieverID, _auth.currentUser!.uid),
     builder: (context,snapshot){
      if (snapshot.hasError) {
        return Text("has error");
      }
      if (snapshot.connectionState==ConnectionState.waiting) {
        return Text("Loading...");
      }
      return ListView(
        children: snapshot.data!.docs
        .map((doc) => _buildMessageItem(doc)).toList(),
      );
     });
  }

  Widget _buildMessageItem(DocumentSnapshot doc){
    Map<String,dynamic> data = doc.data() as Map<String,dynamic> ;
    var alignment = (data["senderId"]==_auth.currentUser!.uid)?Alignment.centerRight
    :Alignment.centerLeft;
    final messageText = data["message"];
              final messageSender = data["senderId"];
              final currentUser = _auth.currentUser!.email;
    return Container(
      alignment: alignment,
      child: Column(children: [
        /*Text(data["senderEmail"]),
        Text(data["message"]),*/
        MessageBox(isMe: messageSender==currentUser,text: messageText,sender: messageSender,)
        
      ]),
    );
  }

  Widget buildUserInput(){
    
    return Row(
      children: [
        Expanded(child:
         TextField(
          controller: messageController,
          obscureText: false,
         )),
         IconButton(onPressed: sendMessage, icon: Icon(Icons.arrow_upward))
      ],
    );
  }
}



class MessageBox extends StatelessWidget {
  const MessageBox({ this.text ,  this.sender ,required this.isMe, Key?key}):super(key: key);
  final String? sender;
  final String? text;
  final bool isMe;
  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(10),
      child: Column(
        crossAxisAlignment:isMe? CrossAxisAlignment.end:CrossAxisAlignment.start,
        children: [
          Text('$sender',style: TextStyle(fontSize: 12, color: Colors.black45),),
          Material(
            elevation: 5,
            borderRadius: BorderRadius.only(
              topLeft:isMe? Radius.circular(15):Radius.circular(0),
              bottomLeft: Radius.circular(15),
              bottomRight:Radius.circular(15),
              topRight:isMe?Radius.circular(0): Radius.circular(15),
            ),
            color: isMe? Color.fromARGB(255, 247, 196, 114):Color.fromARGB(255, 0, 193, 164),
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8,vertical: 20),
              child: Text('$text',
              style:  isMe? TextStyle(fontSize: 15,color: const Color.fromARGB(255, 0, 0, 0)):TextStyle(fontSize: 15,color: Colors.white),),
            ),
          ),
        ],
      ),
    );
              
  }
}